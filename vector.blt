template<typename T>
class vector
{
    using range;
    init;
    init(range<T>& init_list); // something like c++0x initializer list..
    push_back(const T& item);
    size => (int size);
    reserve(int size);
    resize(int size, const T& t=T() );
    get_range => (range<T>& iterator);
    operator[] (int offset) => (T& item);
}

T* vector::data;
int vector::size;
int vector::reserved;

vector::init
    : data(0)
    , size(0)
    , reserved(0)
{
}

// perhaps some lisp style lists
vector::init(range& init_list)
    : data(0)
    , size(0)
    , reserved(0)
{
    while( !init_list.empty() ) { // need to figure out the best way.. this is slow
        self.push_back(item=init_list.front());
        init_list.pop_front();
    }
}

vector::push_back

vector::get_range => (range<T> iterator)
{
    range<T> iterator(begin = &self.data[0],
                      end   = &self.data[self.size-1]);
    return(iterator=iterator);
} => {
    //clean up if not done by raii...
}
type fntype = 
// cleaner<char*> bob(new char[10], delete[]);
// cleaner<FILE*> fp(fopen(), fclose);

::unit_test // maybe something like this for unit tests? I think they should be close to the
            // actual code.. otherwise its too painful to make them
{
    vector x = [1, 4, 6];
}
