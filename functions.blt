import "string.h" with "C" as cstring;
import "string" with "Python" as pystring;
import "string.hs" with "Haskell" as hsstring;
import "string.pm" with "Perl" as plstring;
import range;

//comment
// -- note that there is no long style comment like in C
// ... you'll have to use a nice editor (like vim) that makes
//      it easy to comment multiline like this

strlen = extern "C" (const char* str)
                 => (int count)
                 {{strlen}};

parray::append(int item)
        = extern "Python" (auto array=self.data, int item=item)
        {{ array.append(item) }};

nop = extern "Asm" {{nop}};

argfun (int arg=4)
{
    int x = 4;
}

voidfun
{
}

blarg (const T& t) => (int size) {
    return( t.size() );
}

// any functions should only use functions defined before it...
// and no dependencies across files...
// this forces 
::test_blarg
{
    if( const[debugging] == "TRUE") {
    }
    print(blarg("test"));
}

retfun => (int pass)
{
    f -= 10;
    self.blah /= 3;
    int x = 2/0;
}

fullfun (int x) => (int y=2, bigint z)
{
    //halffun (int x) => (int abc) { return abc*abc; }
    if( x > 10 ) {
        return(20);
    }
    else {
        return(100);
    }
}

template<typename T>
class vector
{
    typedef range.range<T=T> range_T;
    init; //a regular comment
    init(range_T& init_list); // range is something like c++0x initializer list.. maybe
    push_back(const T& item);
    size => (int size);
    reserve(int size);
    resize(int size, const T& t=T() );
    get_range => (range_T& iterator);
    operator[] (int offset) => (T& item);
}

// a class must be declared before any of its functions can be defined
vector::init(range_T& init_list)
    : data      = 0
    , size      = 0
    , reserved  = 0
{
    auto x = retfun();
}
