no reserved keywords

symbols
@ -- chunk of code to execute (only for macros)
$[] -- assembly (probably similar to LLVM with some extra stuff)

$0 in a macro would represent a unique value common to that particular instantiation of the macro (as in just one case in a switch/case series)
$1 would represent a unique value common to the whole macro expansion (as in all items in an if/else series or switch/case series)
$name wolud represent a variable name to be used for scoping in the event that it is desired in a macro (see for loop for an example)

Everything is either a macro definition or a macro call.

@ by itself will force a block to exist with the following
items, e.g. useful for building a struct or listing out all
types.

Function definitions are simply another macro call.

an idea (see whitespace98.pdf) is to allow overloading
whitespace, blt3 is probably already capable without
changes.

because type information isn't defined in the language,
nor are objects, nor are functions, it can be used as
both a statically typed language and dynamically typed
language by just using different libraries. With the
normal one being setup for static typing.

Scoping will probably be static block level scoping, so
that any macro defined within a block will be visible within
that block and subblocks. Dynamic scoping can be fairly
easily implemented inside block scoping as can be seen in
../dynamic_scoping.cpp (only blt will have nicer syntax for
it)
Scoping will also probably be defined so that a new scope
level is created whenever an @block() is called from a macro

can be built in by macro expansions within the function macro
e.g. a -> obj(type(a),"a")
      so a function might have a signature like this:
  fn(obj(int,$$a))
  which would be produced when the user entered a function like fn(int a)

$ setup_function_arg $TYPE $def_name
$ setup_function $ret_type @block ...

$ $ret_type operator $infix($TL $tl, $TR $tr) @block
    setup_function operator_$infix obj($TL,$$tl_in) obj($TR,$tr_in)
    $ obj($TL,$$tl_in) $infix obj($TR,$$tr_in)
        call_function operator_$infix obj($TL,$$tl_in) obj($TR,$tr_in)

$ $ret_type $fn_name($T1 $t1, ...) @block

need a way to compare and add numbers in macro language that is similar
to how a user might set up an add/compare macro for such numbers after
compliation (they probably should also be in charge of defining this macro)

need a way to make say 'no overwritting this macro' in both the global sense
and in the particular scope.

need to come up with the best way to have errors.. I am still thinking along
the lines of something like
$ $fname(...)
    ${"Unable to find function named" $$fnname}$
but I need to make sure this will work out ok

A a -> define macro "a -> obj(A,a)" & alloca stuct.A & add to destructor list
A a() -> A a & call A constructor
obj(A,b)
operator #(A a, B b) -> obj(A,a) # obj(B,b) -> operator #(obj(A,a),obj(B,b)) & normal function stuff
$# line # -- maybe
$? filename -- maybe
$0 arbitrary number within this macro
$1 arbitrary number within this greater macro... need to clearly define
$["mov " $blah ", ax"]$ - some assembly output
*  any call to a @block results in a new scope level
*  delay expanding macro arguments until the last minute
*  maybe only allow expansion if the macro result is defined in one line (for the above point)
*  $$name converts the name used (and represented by $name) will be converted into a string
*  name -> type("name")
*  var     -> obj(name,"var")  -> obj(type("name"),"var")
* macrodef = "$" macrocall
* #!/usr/bin/blt_run -- compile source and run (so it can be used for short scripts easily)
* error messages like ${"Error: The system is down (" $? ":" $# ")"} -- maybe
type inference will be based on the objects returned.. as each object will be
packed in something like obj(type("T"),"t")

$ reverse $X
 $X
$ reverse $X ...
 $reverse ... $X
$ sum $ $X ...X and $ $Y ...Y
  TODO
$ $$X + $$Y
  sum reverse $$X and reverse $$Y
$ in the middle splits apart a constant into its parts
$ name = $value
 auto $name($value)
$ $type $name($value)
 ${"No such type as "$$type}$
$ struct $ptype ...
 $ ptype $name($value)
   $ $name
     ${"variable of name "$$name" already exists"}$

// three types of errors allowed
$ this exists ${"Error this already exists"}$
    "good to go, this is the first definition in this scope"

$ error on call
    ${"You shouldnt call this special macro"}$

$ error if not exists $maybe
    call something existing $maybe ${"Uh oh.. it doesnt actually exist"}$
