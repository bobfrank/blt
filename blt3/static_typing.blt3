$ basic_types
$ basic_types @ $type_name $llvm_type $size $alignment ...
    $ typestr($type_name)
        $llvm_type
    $ sizeof($type_name)
        $size
    $ alignment($type_name)
        $alignment
    $ $type_name $name($init_value)
        $[ "%" $$name " = alloca " $$llvm_type ", align" $$alignment ]$
        $ $name
            obj($type_name,$$name)
    basic_types ...

//  type name   llvm type       size    alignment
basic_types
    char        i8              1       1
    uchar       i8              1       1
    short       i16             2       2
    ushort      i16             2       2
    int         i32             4       4
    uint        i32             4       4
    long        i64             8       8
    ulong       i64             8       8
    half        half            4       8
    float       float           8       4
    double      double          16      8
// TODO figure out pointers

$ $lhs == $rhs
    $["cmp eq"]$

//    eq: equal
//    ne: not equal
//    ugt: unsigned greater than
//    uge: unsigned greater or equal
//    ult: unsigned less than
//    ule: unsigned less or equal
//    sgt: signed greater than
//    sge: signed greater or equal
//    slt: signed less than
//    sle: signed less or equal

// building precedence for users (by adding parentheses when two operations are seen next to eachother)
$ precedes $op1 $op2
    $ $x $op1 $y $op2 $z
        ($x $op1 $y) $op2 $z
    $ $x $op2 $y $op1 $z
        $x $op2 ($y $op1 $z)
$ precedence $last
$ precedence $first $second ...
    precedes $first $second
    precedence $first ...
    precedence $second ...
precedence . * / + - << >> < <= > >= & ^ | && || = += -= *= /= %= &= ^= |=

$ get_types
$ get_types @ $type $name ...
    typestr($type) ; " " ; get_types ...
$ add_element_macros
$ add_element_macros $name @ $type $elemname ...
    $ $name . $elemname
        $["get $elemname from $name... TODO"]$
    add_element_macros $name ...

// TODO add templating like C++ templates (will need to setup macros which set this up per type-set supplied as needed)
$ struct $X @ ...
    $["%struct." $$X " = type {" ]$ ; asm get_types @ ... ; $["}\n"]$

    $ sizeof($X)
        //TODO figure out with alignment issues, etc
    $ typestr($X)
        $["%struct." $$X]$
    $ alignment($X)
        //TODO figure out the proper alignment -- max(alignment(...))?
    $ $X $name
        add_element_macros $name ...
    $ $returntype $X :: $name (...name) @block
        //TODO setup function definition stuff
$ asm $$quote ...
    $[ $$quote ]$
    asm ...
$ asm $name ...
    $[ $ $name ... ]$
$ stack_alloc($name, $T)
    asm "%" $$name " = alloca "; asm typestr($T) ; asm ", align " ; asm alignment($T)
$ heap_alloc($name, $T)
    stack_alloc($name, $T)
    $["call malloc "]$
    sizeof($T)
    $["mov ax, %" $$name]$
    asm "%1" $$0 " = call noalias i8* @malloc(i64 " ; asm sizeof($T) ; asm ") nounwind"
    $["%2" $$0 " = bitcast i8* %1" $$0 " to %struct." $$type]$
    $["store %struct." $$type " %2" $$0 ", %struct." $$type "* %" $$name ", align 8"]$
    $["%3" $$0 " = load %struct." $$type "* %" $$name ", align 8"]$

//  %4 = call noalias i8* @malloc(i64 4) nounwind
//  %5 = bitcast i8* %4 to i32*
//  store i32* %5, i32** %y, align 8

$ $result_type $fn(...) @block
    convert
    block must have return of type $result_type
$ void $fn(...) @block
    convert
    if block has return it must not be the return macro with a parenthetical argument
$ auto $b( obj($type,$a))
    $type $b( obj($type,$a) )

struct W
    int    x
    float  y
    double d
