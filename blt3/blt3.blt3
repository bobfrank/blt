struct Tree<T>
    vector<Tree<T>*> nodes
    T value

void new(const Tree<T>& tree, const T& value)
    tree.value = value

void Tree<T>::add_child(const T& value)
    tree.nodes.push_back(new Tree<T>(value))

const T& operator [](const int idx)
    return tree.data[idx]

void delete(Tree<T>& tree)
    for node in tree.nodes
        delete node

Tree<Token> // instantiate this type so it can be used

void parse(    Tree<Token>&          root,
          int*                  new_offset,
          const Grammar&        G,
          const Vector<Token>&  input,
          int                   offset = 0 )

    G_iter = find(G, value(root))
    if( end(G_iter) )
        *new_offset = offset + 1
        return input[offset] == value(root)
    empty_able = false
    for(g, G_iter)
      to_tokens = rhs(g)
      if(empty(to_tokens))
          empty_able = true
      else
          good = true
          for(token, to_tokens)
              if(good)
                tree = add_child(root, token)
                nf = offset
                parsed = parse(tree, &nf, G, input, offset)
                if( !parsed )
                    good = false
                    clear(root)
                else
                    offset = nf
          if(good)
              *new_offset = offset
              return true
    return empty_able
