// makes the class templatized... nowhere else can you change T to something else...
//   i.e. no template<> on an individual member function
// -- maybe have an option to say 'make template as pointer' so that you can
//    have just one copy of the code in the binary... but only an option.. we
//    still want some speed
template(typename T)
class range
{
    init(T& begin, T& end);
    empty => (bool empty);
    pop_front;
    front => (T& item);
    pop_back;
    back => (T& item);
}
// const ranges and forward/backward only will have to be thought about too...
//      with minimal code

myconst T* range::end;
myconst T* range::begin;

range::init(T& begin, T& end)
    : end(&end)
    , begin(&begin)
{
}

range::empty
{
    return( empty = (self.begin >= self.end) );
}

range::pop_front
{
    assert( !self.empty() );
    self.begin++;
}

range::front => (T& item)
{
    return(item = *self.begin);
}

range::pop_back
{
    assert( !self.empty() );
    self.end--;
}

range::back => (T& item)
{
    return(item = *self.end);
}


// and to create a reserve range
template(typename T)
class reverse
{
    init(range(T=T)& original);
    empty => (bool empty);
    pop_front;
    front => (T& item);
    pop_back;
    back => (T& item);
}

range(T=T)& reverse::original;

reverse::init(range(T=T)& original)
    : original( original )
{
}

reverse::empty => (bool empty)
{
    return(empty=self.original.empty());
}

reverse::pop_front
{
    self.original.pop_back();
}

reverse::front => (T& item)
{
    return(item = self.original.back());
}

reverse::pop_back
{
    self.original.pop_front();
}

reverse::back => (T& item)
{
    return(item=self.original.front());
}



class xrange : range(T=bigint) // should be a forward-only range...
{
    init(bigint max=bigint::infinity);
    pop_back = no; // breaks the contract of being a range type... need to figure out how to make this pretty
    back = no;
    
}

xrange
